// Generated by view binder compiler. Do not edit!
package com.example.easyfood.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.easyfood.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import pl.droidsonroids.gif.GifImageView;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView categoryCard;

  @NonNull
  public final ConstraintLayout contraint;

  @NonNull
  public final LinearLayout header;

  @NonNull
  public final ImageView imgRandomMeal;

  @NonNull
  public final ImageView imgSearch;

  @NonNull
  public final GifImageView loadingGif;

  @NonNull
  public final CardView randomMeal;

  @NonNull
  public final RecyclerView recViewMealsPopular;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final ConstraintLayout rootHome;

  @NonNull
  public final TextView tvCategory;

  @NonNull
  public final TextView tvHome;

  @NonNull
  public final TextView tvOverPupItems;

  @NonNull
  public final TextView tvWouldLikeToEat;

  private FragmentHomeBinding(@NonNull ConstraintLayout rootView, @NonNull CardView categoryCard,
      @NonNull ConstraintLayout contraint, @NonNull LinearLayout header,
      @NonNull ImageView imgRandomMeal, @NonNull ImageView imgSearch,
      @NonNull GifImageView loadingGif, @NonNull CardView randomMeal,
      @NonNull RecyclerView recViewMealsPopular, @NonNull RecyclerView recyclerView,
      @NonNull ConstraintLayout rootHome, @NonNull TextView tvCategory, @NonNull TextView tvHome,
      @NonNull TextView tvOverPupItems, @NonNull TextView tvWouldLikeToEat) {
    this.rootView = rootView;
    this.categoryCard = categoryCard;
    this.contraint = contraint;
    this.header = header;
    this.imgRandomMeal = imgRandomMeal;
    this.imgSearch = imgSearch;
    this.loadingGif = loadingGif;
    this.randomMeal = randomMeal;
    this.recViewMealsPopular = recViewMealsPopular;
    this.recyclerView = recyclerView;
    this.rootHome = rootHome;
    this.tvCategory = tvCategory;
    this.tvHome = tvHome;
    this.tvOverPupItems = tvOverPupItems;
    this.tvWouldLikeToEat = tvWouldLikeToEat;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.category_card;
      CardView categoryCard = ViewBindings.findChildViewById(rootView, id);
      if (categoryCard == null) {
        break missingId;
      }

      id = R.id.contraint;
      ConstraintLayout contraint = ViewBindings.findChildViewById(rootView, id);
      if (contraint == null) {
        break missingId;
      }

      id = R.id.header;
      LinearLayout header = ViewBindings.findChildViewById(rootView, id);
      if (header == null) {
        break missingId;
      }

      id = R.id.img_random_meal;
      ImageView imgRandomMeal = ViewBindings.findChildViewById(rootView, id);
      if (imgRandomMeal == null) {
        break missingId;
      }

      id = R.id.img_search;
      ImageView imgSearch = ViewBindings.findChildViewById(rootView, id);
      if (imgSearch == null) {
        break missingId;
      }

      id = R.id.loading_gif;
      GifImageView loadingGif = ViewBindings.findChildViewById(rootView, id);
      if (loadingGif == null) {
        break missingId;
      }

      id = R.id.random_meal;
      CardView randomMeal = ViewBindings.findChildViewById(rootView, id);
      if (randomMeal == null) {
        break missingId;
      }

      id = R.id.rec_view_meals_popular;
      RecyclerView recViewMealsPopular = ViewBindings.findChildViewById(rootView, id);
      if (recViewMealsPopular == null) {
        break missingId;
      }

      id = R.id.recycler_view;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      ConstraintLayout rootHome = (ConstraintLayout) rootView;

      id = R.id.tv_category;
      TextView tvCategory = ViewBindings.findChildViewById(rootView, id);
      if (tvCategory == null) {
        break missingId;
      }

      id = R.id.tv_home;
      TextView tvHome = ViewBindings.findChildViewById(rootView, id);
      if (tvHome == null) {
        break missingId;
      }

      id = R.id.tv_over_pup_items;
      TextView tvOverPupItems = ViewBindings.findChildViewById(rootView, id);
      if (tvOverPupItems == null) {
        break missingId;
      }

      id = R.id.tv_would_like_to_eat;
      TextView tvWouldLikeToEat = ViewBindings.findChildViewById(rootView, id);
      if (tvWouldLikeToEat == null) {
        break missingId;
      }

      return new FragmentHomeBinding((ConstraintLayout) rootView, categoryCard, contraint, header,
          imgRandomMeal, imgSearch, loadingGif, randomMeal, recViewMealsPopular, recyclerView,
          rootHome, tvCategory, tvHome, tvOverPupItems, tvWouldLikeToEat);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
